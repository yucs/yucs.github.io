<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yucs&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yucs.github.io/"/>
  <updated>2017-11-24T13:13:05.000Z</updated>
  <id>https://yucs.github.io/</id>
  
  <author>
    <name>yucs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>密码学基本常识（一）</title>
    <link href="https://yucs.github.io/2017/11/22/2017-11-22-cryptology/"/>
    <id>https://yucs.github.io/2017/11/22/2017-11-22-cryptology/</id>
    <published>2017-11-21T16:00:00.000Z</published>
    <updated>2017-11-24T13:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术概要"><a href="#技术概要" class="headerlink" title="技术概要"></a><strong>技术概要</strong></h1><h2 id="密码技术概要图"><a href="#密码技术概要图" class="headerlink" title="密码技术概要图"></a>密码技术概要图</h2><p><img src="/picture/1.5.png" alt="密码技术概要图"> </p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul><li><p>伪随机生成器：是一种能够模拟生产随机数列的算法,承担着密钥生成的重要职责。如果生成随机数的算法不好，窃听者就能推测出密钥，从而带来通信机密性下降的风险。</p></li><li><p>数字签名：是一种能够保证完整性，提供认证，并防止否认的密码技术。</p></li><li><p>对称密码： 在加密和解密，使用同一个密钥的方式。</p></li><li><p>公钥密码/非对称密码: 是指在加密和解密时使用不同密钥的方式。</p></li><li><p>单向散列函数/哈希值/密码校验/消息摘要:所保证的并不是机密性，而是完整性.</p></li></ul><h1 id="密码与信息安全常识"><a href="#密码与信息安全常识" class="headerlink" title="密码与信息安全常识"></a><strong><em><em>密码与信息安全常识</em></em></strong></h1><h2 id="任何密码总有一天都会被破解"><a href="#任何密码总有一天都会被破解" class="headerlink" title="任何密码总有一天都会被破解"></a>任何密码总有一天都会被破解</h2><h2 id="密码只是信息安全的一部分"><a href="#密码只是信息安全的一部分" class="headerlink" title="密码只是信息安全的一部分"></a>密码只是信息安全的一部分</h2><h2 id="不要使用保密的密码算法"><a href="#不要使用保密的密码算法" class="headerlink" title="不要使用保密的密码算法"></a>不要使用保密的密码算法</h2><ul><li>密码算法的秘密，早晚会公诸于世！一旦密码，算法，详细信息被披露，依靠对算法本身进行保密，来确保机密信息的，密码系统也就土崩瓦解了。</li><li>开发高强度的密码算法是非常困难的。现在世界上公认的被认为强度较高的密码算法，几乎都是通过密码破译者长期还是破解未果而终活下来的。</li><li>试图通过对密码算法本身进行保密，来确保安全性的行为，一般称之为隐蔽性安全性，这种行为是危险且愚蠢的。</li></ul><h2 id="使用低强度的密码比不进行任何加密更危险"><a href="#使用低强度的密码比不进行任何加密更危险" class="headerlink" title="使用低强度的密码比不进行任何加密更危险"></a>使用低强度的密码比不进行任何加密更危险</h2><ul><li>容易让用户通过“密码”这个词，获得一种错误的安全感，进而导致用户在处理一些机密信息的时候麻痹大意。</li></ul><h1 id="对称密码"><a href="#对称密码" class="headerlink" title="对称密码"></a><strong><em>对称密码</em></strong></h1><h2 id="通过XOR（异或）就可以实现高强度的密码"><a href="#通过XOR（异或）就可以实现高强度的密码" class="headerlink" title="通过XOR（异或）就可以实现高强度的密码"></a>通过XOR（异或）就可以实现高强度的密码</h2><ul><li>将明文A用密钥B进行加密，得到密文A XOR B）</li><li>将密文A XOR B）用密钥B进行加密，得到明文A</li><li>形象图参考如下：<br><img src="/picture/xor.png" alt="xor图"></li><li>参考链接：<a href="http://www.ruanyifeng.com/blog/2017/05/xor.html" target="_blank" rel="noopener">XOR 加密简介</a></li></ul><h2 id="DES，三重DES"><a href="#DES，三重DES" class="headerlink" title="DES，三重DES"></a>DES，三重DES</h2><ul><li><p>DES(Data Encryption Standard)，即数据加密标准，是1977年美国联邦信息处理标准中所采用的一种对称密码。一直以来被美国以及其他国家的政府和银行等广泛使用，但是随着计算机的进步，现在的DES已经能够被暴力破解，强度大不如前了，现在我们<strong>不应该再使用DES了</strong>。</p></li><li><p>现在DES已经可以在现实的时间内被暴力破解，三重DES出于这个目的被开发出来的,但是处理速度不高，而且在安全性方面也逐渐显现出一些问题，也不推荐使用。</p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2></li><li><p>美国国家标准技术研究所 用 高级加密标准（Advanced Encryption Standard: AES）,用以取代DES。 最终经过安全性分析、软硬件性能评估等严格的步骤，Rijndael算法。</p></li><li><p><a href="http://blog.csdn.net/qq_28205153/article/details/55798628" target="_blank" rel="noopener">AES加密算法的详细介绍与实现</a>: AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。</p><ul><li>加密流程图：<br><img src="/picture/AES.png" alt="AES加密流程图"></li></ul></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>然而用对称密码进行通信时，还会出现密钥的配送问题，及如何将密码安全的发送给接收者。为了解决密码配送问题，我们需要用公钥密码技术。</li><li>使用一种密钥空间巨大，且在算法上没有弱点的对称密码，就可以通过密文来确保明文的机密性，巨大的密钥空间能够抵御暴力破解，算法上没有弱点可以抵御其他类型的攻击。</li></ul><h1 id="分组密码的模式"><a href="#分组密码的模式" class="headerlink" title="分组密码的模式"></a><strong><em>分组密码的模式</em></strong></h1><ul><li>分组密码：是每次只能处理特定长度的一块数据的一类密码算法，这里的“一块”就称为分组（block）；一个分组的比特数就称为分组长度（block lenght）<ul><li>AES的分组长度可以从128比特,192比特和256比特进行选择，当选择128比特的分组长度时，AES一次加密128比特的明文，并生成128比特的密文。</li></ul></li><li>分组密码模式：分组密码算法只能加密固定长度的分组，但是我们需要加密的明文长度可能会超过分组密码的分组长度，这时就需要对分组密码算法进行迭代，以便将一段很长的明文全部加密。而迭代的方法就称为分组密码的模式（mode）。<br><img src="/picture/block_cipher1.png" alt="分组密码模式图1"><br><img src="/picture/block_cipher2.png" alt="分组密码模式图2"></li><li>分组密码有很多种模式，如果模式选择不恰当，就无法保证机密性。ECB模式中，明文中的一些规律就可以通过密文被识别出来。</li><li>安全性最差的模式是ECB模式，推荐使用CTR模式。</li></ul><h1 id="公钥密码"><a href="#公钥密码" class="headerlink" title="公钥密码"></a>公钥密码</h1><ul><li>对称密钥存在配送问题：<br><img src="/picture/密钥配送问题.png" alt="密钥配送问题"></li><li>使用公钥密码 解决了配送问题 (但存在公钥认证问题)：<br><img src="/picture/公钥密码发送消息.png" alt="公钥密码发送消息"></li><li>RAS</li><li>ECC</li></ul><h1 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h1><h1 id="数字签名-和-证书"><a href="#数字签名-和-证书" class="headerlink" title="数字签名 和 证书"></a>数字签名 和 证书</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;技术概要&quot;&gt;&lt;a href=&quot;#技术概要&quot; class=&quot;headerlink&quot; title=&quot;技术概要&quot;&gt;&lt;/a&gt;&lt;strong&gt;技术概要&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;密码技术概要图&quot;&gt;&lt;a href=&quot;#密码技术概要图&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="密码" scheme="https://yucs.github.io/categories/%E5%AF%86%E7%A0%81/"/>
    
      <category term="区块链" scheme="https://yucs.github.io/categories/%E5%AF%86%E7%A0%81/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="https://yucs.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
      <category term="密码" scheme="https://yucs.github.io/tags/%E5%AF%86%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>学好编程语言的方法论</title>
    <link href="https://yucs.github.io/2017/11/22/2017-11-22-languge/"/>
    <id>https://yucs.github.io/2017/11/22/2017-11-22-languge/</id>
    <published>2017-11-21T16:00:00.000Z</published>
    <updated>2017-11-25T13:59:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对编程语言的态度"><a href="#对编程语言的态度" class="headerlink" title="对编程语言的态度"></a>对编程语言的态度</h1><ul><li><strong>语言只是个工具，往一个具体领域学习研究才是王道</strong>：（当然，具体项目选择语言还是很重要的：该语言开发效率，性能，可读性，现有可用库是否满足项目等等<strong>语言生态环境</strong>，就看如何trade-off选择了），所以我不太喜欢用Python工程师，golang工程师来给工程师打标签，而ios/前端/web后端/分布式系统 这样带有领域方向的标签才合适。</li></ul><ul><li><strong>不要抵触学习新语言心理，按需学习</strong>：无论开源项目,还是项目开发选中的语言，毕竟都有它的优势，需要就学习，毕竟学习一门语言也不会太耗时间（因为我想学语言最耗时间的在于学习库,无论语言，语言特性，语言背后的原理，都能很快就学习掌握的,尤其学习c++后，<strong>毕竟主流语言基本都是面向对象，而精髓是万变不离其宗，重要的还是抽象 即 理解掌握‘设计模式’的核心思想</strong>)，也能加深对语言的理解，发现自己真正欣赏动心的语言。</li></ul><ul><li><p>现在开发语言都在相互借鉴学习，个人觉得发展趋势：<strong>追求简洁性，开发效率，兼顾性能，更加注重业务逻辑，而非语言本生带来的心智负担</strong>（eg:语法层面引用代替指针或者如golang语言弱化指针，垃圾回收机制）。</p></li><li><p>个人觉得<strong>深刻学习语言最好的方式就是： 看用该语言写的开源项目源码，当然这涉及到动力问题，所以去研究自己感兴趣的领域，开源项目就很重要的，无论是工作需要，还是自己兴趣</strong>，以我为例，大学刚开始工作时候，研究linux内核开发，glusterfs分布式系统,也就学习C/C++，shell脚本了，学习初步研究openstack时候就学习python，研究docker也就学习了golang语言。</p></li></ul><h1 id="如何写出质量高的代码"><a href="#如何写出质量高的代码" class="headerlink" title="如何写出质量高的代码"></a>如何写出质量高的代码</h1><ul><li><p><strong>最基本</strong>：理解语言底层原理，而不是简单的使用</p></li><li><p><strong>看用该语言写的开源项目源码</strong> </p><ul><li><p>看逻辑流程时适合小中断，多注意源码组织布局，多注意该 类/模块 其他函数（封装/抽象）,猜测该类模块基本功能，这样我想对于项目组织理解会更深刻，<strong>能潜移默化的提高你代码的质量</strong>。</p></li><li><p><strong>高质量代码看多了，对代码品味高了</strong>，自己的写的代码质量当然也差不了多少，此外还能。so,我相信经常看开源项目的人写出来的代码质量都不会差的。</p></li><li>能学到使用该语言的技巧，间接学习丰富该语言的库等等，肯定都<strong>有很多让自己眼睛一亮，学习借鉴的地方</strong>，这样写自己代码就有底气自信多了。</li></ul></li><li><p>就如不懂github就不是一个合格的工程师一样， 某种意义讲，没有看过开源源码的也不算是个合格的工程师。</p></li><li><p>理解掌握 <strong>设计模式</strong>的核心思想：</p><ul><li>封装变化（抽象)</li><li>多用组合，少用继承</li><li>针对接口编程，而不针对实现编程。</li></ul></li></ul><ul><li>对于go语言，看开源项目，多关注代码组织结构时，也多注意包中的*_test.go，在没没文档情况下，相对容易理解该包作用。</li></ul><h1 id="语言对比理解"><a href="#语言对比理解" class="headerlink" title="语言对比理解"></a>语言对比理解</h1><ul><li><p><strong>c/c++</strong>： 偏向底层基础软件，编译性语言，高性能，嵌入式等方向，指针，无垃圾回收机制，开发效率相对低，有一定的心智负担，可以<strong>理解为高级语言中的汇编语言</strong></p></li><li><p><strong>python</strong>：追求开发效率，解释性语言，性能相对低，<a href="https://www.python.org/dev/peps/pep-0020/" target="_blank" rel="noopener">The Zen of Python</a>,可用于脚本开发</p></li><li><p><strong>java</strong>: <strong>成熟稳定，生态环境比较好</strong>，编译性语言，语法冗长，可用于企业级应用开发，性能高的基础软件，大数据生态。。很多大公司稳妥的选择。</p></li><li><p><strong>golang</strong>:（个人）设计优雅，interface接口的设计很好的面向对象的思想，工程性开发语言（语言层面有一定的强制性风格要求），编译型<strong>基于goroutine和channel的通信（语言层面支持）简洁高效的支持多并发</strong>，可用于高性能高并发系统开发</p></li><li><p><strong>scala</strong>: 函数式编程，追求速度，跑在JVM上，Java互操作性， 不可变，无副作用，函数是一等公民等函数式编程思维方式跟面向对象思想有一定的区别，对于开发人能力相对比较有要求。个人觉得对于函数式编程思想，对于数据的处理更贴近。。用于大数据领域（python ,java，scala对比：<a href="https://www.zhihu.com/question/19748408/answer/62527490" target="_blank" rel="noopener">Scala 是一门怎样的语言，具有哪些优缺点？</a>紫杉的回答）</p></li></ul><h1 id="资源推荐"><a href="#资源推荐" class="headerlink" title="资源推荐"></a>资源推荐</h1><h2 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h2><ul><li><a href="http://blog.csdn.net/u010129347/article/details/46601571" target="_blank" rel="noopener">学习推荐书籍（golang ,web ,机器学习)</a> golang 部分</li></ul><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><ul><li>《java编程思想》（Think in java）<br>有深度精炼的书，不适合新手比，但提升必看的书（较有深度的书），层面设计也多跟C++做对比，比较深度的<strong>分析讲解面向对象的编程理念</strong>（即<strong>更多解释WHY 这么设计</strong>，而非只是语法层面）。</li><li>《java核心技术 卷一》<br> 适合新手看，中规中矩，语法层面更细些。</li></ul><h2 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h2><ul><li><a href="http://twitter.github.io/scala_school/zh_cn/index.html" target="_blank" rel="noopener">Scala课堂</a>&amp;&amp;<a href="http://twitter.github.io/effectivescala/index-cn.html" target="_blank" rel="noopener">Effective Scala</a></li><li>《scala编程(Programming in Scala)》&amp;&amp;《快学scala》</li><li>可以参考 <a href="https://github.com/jacksu/utils4s" target="_blank" rel="noopener">https://github.com/jacksu/utils4s</a> 中 scala语法学习 资源部分</li><li><a href="https://www.zhihu.com/question/19748408/answer/62527490" target="_blank" rel="noopener">Scala 是一门怎样的语言，具有哪些优缺点？</a>&amp;<a href="http://blog.csdn.net/scgaliguodong123_/article/details/46277159" target="_blank" rel="noopener">为什么选择Scala，它在大数据处理方面有何优势？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对编程语言的态度&quot;&gt;&lt;a href=&quot;#对编程语言的态度&quot; class=&quot;headerlink&quot; title=&quot;对编程语言的态度&quot;&gt;&lt;/a&gt;对编程语言的态度&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;语言只是个工具，往一个具体领域学习研究才是王道&lt;/strong&gt;
      
    
    </summary>
    
      <category term="编程语言" scheme="https://yucs.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="个人见解" scheme="https://yucs.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E4%B8%AA%E4%BA%BA%E8%A7%81%E8%A7%A3/"/>
    
    
      <category term="编程语言" scheme="https://yucs.github.io/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="个人见解" scheme="https://yucs.github.io/tags/%E4%B8%AA%E4%BA%BA%E8%A7%81%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>《硅谷来信》 之 提高判断力的三个准则</title>
    <link href="https://yucs.github.io/2017/08/06/2017-8-6-%E6%8F%90%E9%AB%98%E5%88%A4%E6%96%AD%E5%8A%9B%E7%9A%84%E4%B8%89%E4%B8%AA%E5%87%86%E5%88%99/"/>
    <id>https://yucs.github.io/2017/08/06/2017-8-6-提高判断力的三个准则/</id>
    <published>2017-08-05T16:00:00.000Z</published>
    <updated>2017-11-25T13:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。"><a href="#提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。" class="headerlink" title="提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。"></a>提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。</h1><ul><li>第一个原则，也就是看说话人是否有利益冲突。</li><li>不仅经济学和物理学如此，很多好的理论和观点，在逻辑上都必须站得住脚。</li><li>当然，个别逻辑上站得住脚的论述也可能是诡辩，那么我们还有第三招来判别一个说法是否靠谱，就是明天要聊的成本判定。</li></ul><h1 id="以正合，以奇胜"><a href="#以正合，以奇胜" class="headerlink" title="以正合，以奇胜"></a>以正合，以奇胜</h1><ul><li>无因果关系的过分解读，牵强附会</li><li>今天在互联网时代，很多哗众取宠的人都本着一个语不惊人死不休的原则，一定要把毫不相干的东西，通过非常弱的联系，甚至再编造点事实联系起来，这样好让大家留下深刻印象。我开玩笑地和那几位朋友讲，“这就是他成为了名嘴，而你们只能当吃瓜群众的原因”。</li><li>其实不仅仅是用兵，我们在做事情的时候，固定的方法套路是根本，在此之上的额外的东西是补充。大部分时候要抓住根本，不要热衷于旁门左道。我在之前的来信中也经常讲，对于一件事情，我们首先要了解主流的观点，这样我们就有了做事情的根本，然后可以通过积累一步步前进。不要一开始就为了求新，求奇去接受那些非主流的看法，那样我们做事情会有非常大的随意性，最后的结果就是狗熊掰棒子。</li></ul><h1 id="证伪比证实重要"><a href="#证伪比证实重要" class="headerlink" title="证伪比证实重要"></a>证伪比证实重要</h1><ul><li><p>为什么在科学上和现实生活里，证伪的思维总是比证实更重要呢？因为对于一个现象，我们总可以找到一个能自洽的理论解释它，然后找到几个例子证明我们的解释。这就如同上面那位算命先生给彭教授算命的逻辑一样。</p></li><li><p>我们在生活中实际上经常被这种不可证伪的道理忽悠。人类对事物的认识永远是片面的，只是在不断接近真理而已，我们自认为的那些自洽的、被证实的理论，或者自认为找到的原因，可能不过仅仅是一种可能合理的解释而已，并非构成因果关系的原因。为了说明这一点，我们不妨再看一个例子。<br>总结一下今天的内容，我想强调的是好的思维方式的重要性，具体有两点。首先，那些无法证伪的推论大家要小心，它们比算命先生的预言好不到哪里去。其次，导致一件事情成功的原因非常多，可以有很多解释，不是任何一个能够自洽的解释我们都要相信。很多哗众取宠的人，故意找出很多与众不同，又能自洽的解释，以博得大家的关注，但是，它们未必是真正的原因。</p></li><li>为什么我们说常识很重要呢？因为它经过了很长的时间被证实和证伪，为什么科学和技术很重要呢？因为它们有可重复性。因此，我在思维上，宁可相信常识和经过无数次检验的正统理论，也不轻易接受看似能够自洽的与众不同的解释。这也算是我对孙子说的“以正合，以奇胜”的认同。</li></ul><h1 id="成本原则"><a href="#成本原则" class="headerlink" title="成本原则"></a>成本原则</h1><ul><li>成本的考虑，不仅体现在商业上，也体现在生活的方方面面。很多时候，我们看似不合理的事情，之所以发生了，用成本的思维考虑一下就能够理解了。</li><li>互联网走到今天，很多小众的优质内容不得不收费，也是成本导致的。虽然一些人开始愿意免费写一些优质内容放到网络上，但是出于时间成本的考虑，很难长期坚持下去。<br>成本是我们在做几乎任何事情时都难以避免的一个重要因素，因此，拿它作为一把尺子考量人们想法和做法的初衷，是非常有效的。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。&quot;&gt;&lt;a href=&quot;#提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。&quot; class=&quot;headerlink&quot; title=&quot;提高判断力的三个准则：判定利益冲突、寻找逻辑漏洞和成本原则。&quot;&gt;
      
    
    </summary>
    
      <category term="硅谷来信" scheme="https://yucs.github.io/categories/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
    
      <category term="硅谷来信" scheme="https://yucs.github.io/tags/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>《硅谷来信》 之 成长的智慧（二）</title>
    <link href="https://yucs.github.io/2017/08/01/2017-08-11-%E6%88%90%E9%95%BF%E7%9A%84%E6%99%BA%E6%85%A7%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://yucs.github.io/2017/08/01/2017-08-11-成长的智慧（二）/</id>
    <published>2017-07-31T16:00:00.000Z</published>
    <updated>2017-11-25T13:52:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-和98-的问题"><a href="#2-和98-的问题" class="headerlink" title="2%和98%的问题"></a>2%和98%的问题</h1><ul><li><p>因此，大家就得反思一下，为什么有的人成为了2%的人，而有些人则走到了金字塔的底部。我在《智能时代》一书中讲到，很多人没有踏上新技术革命的大潮，落伍了，这是一个重要的原因。当然，另外还有一个原因，就是不同人的思维方式不同，这对个人最终的影响要远远高于智力、学历和家庭因素。</p></li><li><p>如果一个人想被提升到他老板的位置，他就必须有他老板的思维方式和眼光，不能只盯着自己那一亩三分田，要从上一级部门乃至整个公司的利益出发考虑问题。站在自己的立场，或者自己部门的立场，一个人可能会有一个想法，但是同样这件事，站在老板的立场上、大部门的立场上，会有不同的考虑。帮助自己的老板成功，就意味着能够站在老板的立场上考虑问题，这样，公司才会把更重要的职责交给这个人。 </p><p> 例子：阿里巴巴因为五名员工写程序抢月饼被开除这件事情 （主要分两个阵营：底层开发工程师（反对） 和 资深人士管理层（支持） ）</p></li><li><p>很多处于社会和行业底层的人，常常抱怨社会对他们不公平，但是比较少地思考那是什么，自己怎样才能够改变命运 （<strong>消极被动的思维方式</strong>）：</p><ul><li>98%的人在思维上常常犯的另一个错误就是不能够公正地就事论事</li><li>98%的人另一个爱犯的错误，就是喜欢捡芝麻，而不是捡西瓜</li></ul><ul><li>从员工个人的角度来说，跳出自己的角度看问题，对任何人都是一项非常重要的能力。在数学中，我们都知道局部最优，并不一定导致总体最优。当人能试着从更高的角度去看问题时，经常会觉得自己之前的想法很狭隘。从老板的角度考虑问题，最后真正受益人其实是自己。</li></ul></li><li><p>人的思维方式太重要了。遇到困难时，人往往分为两种态度，一种是想一堆借口给自己的逃避困难，另一种是想尽一切办法做成。这两种态度，造成了人与人最终极大的差距。</p></li><li><p>撒切尔夫人讲，注意你的想法，因为它决定了行动，注意你的行动，因为它决定了习惯，注意你的习惯，因为它决定了性格，注意你的性格，因为它决定了命运。</p></li></ul><h1 id="芝麻和西瓜"><a href="#芝麻和西瓜" class="headerlink" title="芝麻和西瓜"></a>芝麻和西瓜</h1><ul><li>我们不妨看看生活中捡芝麻的行为：</li></ul><ol><li>为了拿免费的东西打破头；</li><li>为了省一块钱出租车钱，在路上多走10分钟；</li><li>为了抢几块钱的红包，三五分钟就看看微信；</li><li>为了挣几百块钱的外快，上班偷偷干私活；</li><li>为了双十一抢货不睡觉；</li><li>为了一点折扣在网上泡上两小时，或者在北京跑五家店</li></ol><ul><li><p>这些人的问题不仅在于时间利用得非常没有效率，还在于他们渐渐习惯于非常低的追求，人一旦心态变得非常低，就很难提升自己、让自己走到越来越高的层次上。很多时候，不仅是那些低收入的人会计较芝麻大的事情，很多经济状况不错的人也不例外。</p></li><li><p>捡西瓜并不难，因为大家喜欢捡芝麻，这个秘密你不妨告诉更多的人，不用怕他们来和你抢西瓜，因为大部分人见到芝麻依然会去捡，捡多了，西瓜自然就留给了你  这样有智慧的人。</p></li></ul><h1 id="这个世界没有欠你什么"><a href="#这个世界没有欠你什么" class="headerlink" title="这个世界没有欠你什么"></a>这个世界没有欠你什么</h1><ul><li><p>首先，我们必须承认任何社会都是分层的。</p></li><li><p>钱多、智商高、读书强、父母好、长得美都是其中的一个变量而已，命运是多个变量互动的结果。</p></li><li><p>对于那些试图在金字塔上爬几个台阶的人来讲，最需要具有的不是抱怨社会的不公平，而是需要付出足够的努力，同时把注意力放到最该关注的事情上去。最后总结一下，这个世界不欠我们任何东西。放弃掉不切实际的幻想，脚踏实地做点事情，我们的生活才会更好。</p></li><li><p>留言  强调格局，更高层次看待问题，不同学科，触类旁通：</p><ul><li><p>从员工个人的角度来说，跳出自己的角度看问题，对任何人都是一项非常重要的能力。在数学中，我们都知道局部最优，并不一定导致总体最优。当人能试着从更高的角度去看问题时，经常会觉得自己之前的想法很狭隘。从老板的角度考虑问题，最后真正受益人其实是自己。</p></li><li><p>本来就有点失眠，读完吴军老师的文章更加难以入眠了，索性就写一点自己的感想吧。我出生在湖南的农村，现在在上海工作。曾经，我以为通过高考上了985的学校，就终于有了和别人在同一个起跑线的机会了。并且，在学校里，也并没有感觉到自己差很多。但是，在工作后，一切就不一样了。突然间就发现自己与别人的差距，不仅仅物质上的、人脉上的，更是思维方式上的、做事格局上的全方位的差距。在换过两次行业后，并在罗辑思维节目的影响下，我意识到了，以前笃信的观念只是一种我脑子里的幻想，不是社会和市场的不公平，也不是努力就会得到想要的。而真正需要做的事是：改变看待世界的方式，正确认识自己所有的以及想要的。大概人生就是这样，想通了一些关节点，行动起来就事半功倍了。之后，我开始走出了关住自己的牢笼，先读了三体、失控，接着读物理学，读人类学，读生物学，读心理学，读认知科学。虽然一开始都是一些通俗读物，但我的认知、视野乃至思维方式都发生了翻天覆地的改变。然后，我转行到了互联网，成了产品经理。虽然这甚至谈不上是一次成功，但是却是我第一次真实地感觉到自己正在变成自己想成为的那种人。这一切就发生在短短的两年多，回过头来看，有时候自己都觉得非常不可思议。最近读过桑德斯的《公平》，让我越发的觉得，所谓公平，就是这个世界到处都存在着可以攀爬的阶梯，越敏锐越努力的人就越能爬升的越高。</p></li><li><p>今天看了吴军老师的来信感触颇多。主要是跟我之前一直在思考一个问题一致。我先说一下我的个人的经历。跟绝大部分的人一样我从大学毕业之后就投入了工作。当时毕业的时候嗯很迷茫，不知道要做什么。刚好看到有一家日本零售企业在招聘就去了。最开始的主要工作就是在卖场做一名导购，在卖场服务顾客，让我印象最深刻的是在我工作的第一天，我遇到一个事情：一位妈妈在卖场上带着一个小孩购物，小孩顽皮，妈妈教训他，指着我说：你以后不好好读书就跟他一样。当时听到我很错愕，出于礼貌，我就还是笑一笑，服务完顾客。但下班后，这个事情我思考了好久，难道做这份工作会让人觉得丢脸吗？思考了好久，我也不知道答案，我就觉得丢脸的不是去服务顾客，丢脸的是不思进取。之后我就拼命地去工作，工作上大家不愿意去做的事情，我都抢先去做，从当初入职到这个公司五年的时间，我从一个小职员做到三家分公司的老总。努力算是有得到回报。当初比较倔强，是想证明我的这个服务顾客的想法本身是没有错的，但是我想想能坚持这么久除了自己努力之外，还有就是日本企业管理的精细化，让我不断地进步，不断不断地去优化自己的管理方式。这是第一个故事，第二个故事就是我出生在福建泉州，经商氛围浓厚，我的的很多同学朋友都是自己的家族企业，然后同学朋友毕业完之后，基本上都是接手家里的家族企业，我的老父亲也是做生意的，但是基本上每次做生意都失败了，现在也还在做。我一直在想：为什么别人做生意可以成功，老父亲做生意会失败呢？这几年跟老同学朋友聚会聊天发现，这些接手家族企业的朋友有很大变化，看待事情也和之前大有不同，深入了解发现主要的原因的是父辈潜移默化的教导，成功和失败的差异不是说钱，也不是说其他的，主要就是富人看待事情的角度，和处理的方法确实有很大的不同。这就是大家说的格局。不同格局看待事情会有所不同，处理方法也就不会了。原来这才是真正本质的差别，这是经历过这么多事情领悟出来的，吴军老师这个专栏提供给我从不同角度去思考问题，让我觉得受益匪浅。唯有不断提升自己，人生才有意义，可以预计的是将来自己还会遇到这样或那样的困难，但自己也将努力前行。</p></li></ul></li></ul><ul><li>今日思考：今天的大学生或者职场上的每一位，理应学习各学科的知识，包括历史、物理、心理学、哲学、经济学等等学科，将每个学科的精髓提取出来，最好能够将它们连接起来，然后在学业上或者工作中勤加练习，再反复循环这个过程。让我想起苏轼的一句话：“厚积而薄发，博观而约取。”</li></ul><h1 id="人生是马拉松长跑"><a href="#人生是马拉松长跑" class="headerlink" title="人生是马拉松长跑"></a>人生是马拉松长跑</h1><ul><li>树立“人生是马拉松长跑”的想法，才能笑到最后。</li><li>很多人即使后来懂得了把人生当作长跑的重要性，但是在年轻时养成了玻璃心，以后就无法为长跑提供动力了。</li><li>今天，当大家都在试图抢先跑出去几十米，或者都在训练那种有爆发力而没有耐力的短跑时，聪明人不妨练就一颗永远摔不坏的强大的心脏。有一颗强大的心脏，自己总是能够不断坚持跑下去的，即使跌倒，还能不断爬起来。如果还能够一边跑，一边欣赏路旁的风景，那就更好了。最终提前跑到终点的会是这样的一些人。</li><li>思考：很多时候我们是习惯性犯错误，或者说累教不改，比如怀着赌徒心理去投资，或者忍不住要玩游戏，能够避免这些已知的错误很重要。有人讲是自制力不够，其实我们不太能相信自己的自制力，是否有一个系统的方法能够帮助我们避免这样的错误呢</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2-和98-的问题&quot;&gt;&lt;a href=&quot;#2-和98-的问题&quot; class=&quot;headerlink&quot; title=&quot;2%和98%的问题&quot;&gt;&lt;/a&gt;2%和98%的问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;因此，大家就得反思一下，为什么有的人成为了2%的人，而有些人则走到
      
    
    </summary>
    
      <category term="硅谷来信" scheme="https://yucs.github.io/categories/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
    
      <category term="硅谷来信" scheme="https://yucs.github.io/tags/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>《硅谷来信》 之 成长的智慧(一）</title>
    <link href="https://yucs.github.io/2017/07/25/2017-07-25-%E6%88%90%E9%95%BF%E7%9A%84%E6%99%BA%E6%85%A7%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://yucs.github.io/2017/07/25/2017-07-25-成长的智慧（一）/</id>
    <published>2017-07-24T16:00:00.000Z</published>
    <updated>2017-11-25T13:50:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="做好最后的-1"><a href="#做好最后的-1" class="headerlink" title="做好最后的%1"></a>做好最后的%1</h1><ul><li><p>我们已经走了九十九步，为什么不把最后一步走完呢？”于是我们进入校园，点完卯才回去。从此，我就记住了一定要把事情的最后一步做好。</p></li><li><p>你可能会发现，在日常生活中，大部分人愿意开头而不愿意收尾，九十九步都走了，就是懒得把最后一步走完。这可能是人的天性，凡事差不多就可以了，总觉得最后一点即使不做，也无关大局，但是这样完成事情的质量就要大打折扣。</p></li></ul><h1 id="生活是具体的"><a href="#生活是具体的" class="headerlink" title="生活是具体的"></a>生活是具体的</h1><ul><li>让我们都记住这句话——“生活是具体的。”</li><li>德国人不仅对待国家和社会的现象如此，对工作和生活更是如此。在德国没有人空喊“提高产品质量”这类的话，但是他们会对一个产品制定一大堆非常具体的指标，如果每个都做到了，就说明总体产品质量都达到了预期。</li><li>生活是具体，在我理解有三层意思，第一层是所有的思想，理论，想法必须落在实处，必须践行。第二层是所有对比的事物必须量化，并且通过量化的数据能理清一个人的思路，知道他是从何种角度来判断该事物的，讨论的人从不同角度看事物时，可以通过讨论，提取出大家都认可的指标进行量化比较。第三层是德国人是秉承了工业革命，科学精神，具体的就是标准化，可重复化。最近学习的《平均的终结：我们怎样在一个崇尚相同性的世界中成功》一书中又提出了反标准化，提倡个性自由，每个人都是一个独特的个体。这与我们所处的互联网时代是息息相关的，在产能过剩，温饱解决，信息过剩的年代，这其实是一种必然，如同工业化时代需要标准化一样。这个时候，我想标准化的适用范围应该在具体的事物上，对于抽象的，人文的东西应该提倡个性化。</li></ul><h1 id="常识-，技术，艺术"><a href="#常识-，技术，艺术" class="headerlink" title="常识 ，技术，艺术"></a>常识 ，技术，艺术</h1><ul><li><p>如果做一句话的总结，那就是什么事情做到50分靠常识，从50分做到90分靠技术，从90分做到100分靠艺术。每一个阶段是不能跳跃的，做到90分我们通过努力都能达到，至于是否能做得更好，就依人而定了。</p></li><li><p>实际上，也确实很少有人靠读成功学的书成功的。那些成功学的书有些讲的是常识，这些常识其实挺有用的，只是常识离成功还实在太远。</p></li><li><p>当然，每一个人由于经验的不同，学习到的知识不同，所拥有的常识也不同。对于医生来讲，很多关于疾病的知识是常识，但是一般人却不知道。</p></li></ul><h1 id="运气的重要性"><a href="#运气的重要性" class="headerlink" title="运气的重要性"></a>运气的重要性</h1><ul><li>人在运气不好的时候，最需要的不是盲目的努力，而是耐心。</li><li>在我接触到的真正成功者中，绝大部分人都会认同自己不过是运气好而已，而不是过分强调自己的能力和努力。有了对运气的认同，人就会少一些怨气，就能更平和地做事，也就更接近于成功。</li><li>既然我们认同了运气的重要性，就不必对自己太苛求。如果我们有<strong>足够的耐心，有好的方法，有持之以恒的努力，或许运气会降临到我们头上</strong>。当然你会问，如果这样，运气依然没有来怎么办？我在这种情况下总是用约翰·肯尼迪的话安慰自己——“问心无愧是我们唯一稳得的报酬。”</li></ul><h1 id="帝道、王道与霸道，兼谈博雅教育"><a href="#帝道、王道与霸道，兼谈博雅教育" class="headerlink" title="帝道、王道与霸道，兼谈博雅教育"></a>帝道、王道与霸道，兼谈博雅教育</h1><ul><li>秦孝公想用短期的方法，达到长期的目标，这是不可能的。而在生活中，很多人也同样问我一些如何用“短期的方法，达成长期的目标”，比如学什么专业可以挣大钱，或者快速获得成功，我也很难回答。实际上，没有人能够对这样的问题给出太好的答案，因为但凡能够比较长期稳定挣钱的行业，开始的投入都是比较大的，并不存在一种不需要投入就能获得很高回报的行业。否则，这个行业一定太挤，以至于一段时间后行业的回报会急剧下降。</li><li>中国过去发展较快，大家晋升的机会较多，但是随着中国步入了中等收入国家之后，中国每个行业中，好的位置基本上被人占满，升迁的机会越来越少。<ul><li>那么我们怎么办，我觉得解决办法是自我的通识教育。我们常常把那些能够在职场上不断提升的人称为有后劲。那么有后劲的人和那些很快在职场上遇到天花板的人相比有什么不同呢？一个非常重要的差别是，有后劲的人有着更广的视野，而这种视野常常来自良好的博雅教育。<br>每次我一说到通识教育、博雅教育，很多人就讲中国没有这种教育，然后表示出一种向往和遗憾。但是，一些人只是叶公好龙而已，因为在行动上他们拒绝关注自己领域之外的知识，认为那是浪费时间，时间一长格局就太小了。如果不能广泛学习知识，只盯着自己那一点点专业，即便做到了10000小时的精进，能完成两次提升就很不错了。</li></ul></li><li><p>人必须掌握一些专业之外的知识，因为只有这样人的眼界才可以开阔起来，才能更好地和别人合作，才能调动更多的资源。毕竟今天早已不是一个人可以关起门来搞定所有事情的时代了。</p></li><li><p>格局大小决定你的未来走多远。如何修炼格局？通识教育。美国大学教育强调通识教育，这是中国教育所缺乏的。比如历史的教学，美国的老师强调研究历史的方法论、知识的输入和实践的输出相结合，强调没有标准答案，只存在有和无逻辑的答案。通识教育，更注重通识和素质的培养，是对一个人全面的培养，是对学生个性、阳光心态、合作能力、创造性思维、逻辑思维、文化素养和运动爱好等综合素质的培养。这种通识教育培养出来的通用智慧，是引出潜藏在学生们内心的智能，这种智慧是个人拥有持续一生的学习热情和能力，是人格的塑造，是批判思考、逻辑判断和独立学习的习惯，并获益终生。</p></li></ul><ul><li><p>对于学理科的人来说，我觉得人文历史真的很重要。</p></li><li><p>老师这篇文章讲得很好，很明白。我就随便再谈谈我的感想。据我自己观察，我们大部分人在很多情况下，会因为简单而忽略常识，或因为暂时看不到回报，放弃常识。就说好好学习，将来才有出息这一条，算不算是常识呢？可你看看有多少人，翘课去网吧，周末看电视剧看到二半夜，周一工作日无精打采的。所以虽说常识看起来很简单，但是真正领会了，照着去做的人，并不多。反倒是看到那些“高级”的方法和技巧，特别是“速成”的技巧，让人热情特别的高涨，以至于总是人们总是在追求更高，更快，更强的半道上夭折。可见没有常识支撑的技巧，只能是镜中花，水中月。 有句话说得好，努力程度之低还轮不到拼天赋。所以请先努力，然后再考虑技巧和天赋的问题。 与大家共勉。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;做好最后的-1&quot;&gt;&lt;a href=&quot;#做好最后的-1&quot; class=&quot;headerlink&quot; title=&quot;做好最后的%1&quot;&gt;&lt;/a&gt;做好最后的%1&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我们已经走了九十九步，为什么不把最后一步走完呢？”于是我们进入校园，点完卯才回去。
      
    
    </summary>
    
      <category term="硅谷来信" scheme="https://yucs.github.io/categories/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
    
      <category term="硅谷来信" scheme="https://yucs.github.io/tags/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    
  </entry>
  
</feed>
